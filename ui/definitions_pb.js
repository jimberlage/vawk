// source: definitions.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.FromClient', null, global);
goog.exportSymbol('proto.FromClient.InnerCase', null, global);
goog.exportSymbol('proto.FromServer', null, global);
goog.exportSymbol('proto.FromServer.InnerCase', null, global);
goog.exportSymbol('proto.Initialize', null, global);
goog.exportSymbol('proto.SetColumnIndexFilters', null, global);
goog.exportSymbol('proto.SetColumnRegexFilter', null, global);
goog.exportSymbol('proto.SetColumnSeparators', null, global);
goog.exportSymbol('proto.SetRowIndexFilters', null, global);
goog.exportSymbol('proto.SetRowRegexFilter', null, global);
goog.exportSymbol('proto.SetRowSeparators', null, global);
goog.exportSymbol('proto.UnexpectedError', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UnexpectedError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UnexpectedError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UnexpectedError.displayName = 'proto.UnexpectedError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FromServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.FromServer.oneofGroups_);
};
goog.inherits(proto.FromServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FromServer.displayName = 'proto.FromServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Initialize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Initialize.repeatedFields_, null);
};
goog.inherits(proto.Initialize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Initialize.displayName = 'proto.Initialize';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetRowIndexFilters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetRowIndexFilters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetRowIndexFilters.displayName = 'proto.SetRowIndexFilters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetRowRegexFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetRowRegexFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetRowRegexFilter.displayName = 'proto.SetRowRegexFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetRowSeparators = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SetRowSeparators.repeatedFields_, null);
};
goog.inherits(proto.SetRowSeparators, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetRowSeparators.displayName = 'proto.SetRowSeparators';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetColumnIndexFilters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetColumnIndexFilters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetColumnIndexFilters.displayName = 'proto.SetColumnIndexFilters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetColumnRegexFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetColumnRegexFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetColumnRegexFilter.displayName = 'proto.SetColumnRegexFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetColumnSeparators = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SetColumnSeparators.repeatedFields_, null);
};
goog.inherits(proto.SetColumnSeparators, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetColumnSeparators.displayName = 'proto.SetColumnSeparators';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FromClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.FromClient.oneofGroups_);
};
goog.inherits(proto.FromClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FromClient.displayName = 'proto.FromClient';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UnexpectedError.prototype.toObject = function(opt_includeInstance) {
  return proto.UnexpectedError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UnexpectedError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UnexpectedError.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UnexpectedError}
 */
proto.UnexpectedError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UnexpectedError;
  return proto.UnexpectedError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UnexpectedError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UnexpectedError}
 */
proto.UnexpectedError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UnexpectedError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UnexpectedError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UnexpectedError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UnexpectedError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string description = 1;
 * @return {string}
 */
proto.UnexpectedError.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.UnexpectedError} returns this
 */
proto.UnexpectedError.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.FromServer.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.FromServer.InnerCase = {
  INNER_NOT_SET: 0,
  OUTPUT: 1,
  UNEXPECTED_ERROR: 2
};

/**
 * @return {proto.FromServer.InnerCase}
 */
proto.FromServer.prototype.getInnerCase = function() {
  return /** @type {proto.FromServer.InnerCase} */(jspb.Message.computeOneofCase(this, proto.FromServer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FromServer.prototype.toObject = function(opt_includeInstance) {
  return proto.FromServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FromServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FromServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    output: msg.getOutput_asB64(),
    unexpectedError: (f = msg.getUnexpectedError()) && proto.UnexpectedError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FromServer}
 */
proto.FromServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FromServer;
  return proto.FromServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FromServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FromServer}
 */
proto.FromServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOutput(value);
      break;
    case 2:
      var value = new proto.UnexpectedError;
      reader.readMessage(value,proto.UnexpectedError.deserializeBinaryFromReader);
      msg.setUnexpectedError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FromServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FromServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FromServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FromServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUnexpectedError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UnexpectedError.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes output = 1;
 * @return {!(string|Uint8Array)}
 */
proto.FromServer.prototype.getOutput = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes output = 1;
 * This is a type-conversion wrapper around `getOutput()`
 * @return {string}
 */
proto.FromServer.prototype.getOutput_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOutput()));
};


/**
 * optional bytes output = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutput()`
 * @return {!Uint8Array}
 */
proto.FromServer.prototype.getOutput_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOutput()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.FromServer} returns this
 */
proto.FromServer.prototype.setOutput = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.FromServer.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.FromServer} returns this
 */
proto.FromServer.prototype.clearOutput = function() {
  return jspb.Message.setOneofField(this, 1, proto.FromServer.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FromServer.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UnexpectedError unexpected_error = 2;
 * @return {?proto.UnexpectedError}
 */
proto.FromServer.prototype.getUnexpectedError = function() {
  return /** @type{?proto.UnexpectedError} */ (
    jspb.Message.getWrapperField(this, proto.UnexpectedError, 2));
};


/**
 * @param {?proto.UnexpectedError|undefined} value
 * @return {!proto.FromServer} returns this
*/
proto.FromServer.prototype.setUnexpectedError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.FromServer.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FromServer} returns this
 */
proto.FromServer.prototype.clearUnexpectedError = function() {
  return this.setUnexpectedError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FromServer.prototype.hasUnexpectedError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Initialize.repeatedFields_ = [3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Initialize.prototype.toObject = function(opt_includeInstance) {
  return proto.Initialize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Initialize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Initialize.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowIndexFilters: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rowRegexFilter: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rowSeparatorsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    columnIndexFilters: jspb.Message.getFieldWithDefault(msg, 4, ""),
    columnRegexFilter: jspb.Message.getFieldWithDefault(msg, 5, ""),
    columnSeparatorsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Initialize}
 */
proto.Initialize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Initialize;
  return proto.Initialize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Initialize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Initialize}
 */
proto.Initialize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRowIndexFilters(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRowRegexFilter(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRowSeparators(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnIndexFilters(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnRegexFilter(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumnSeparators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Initialize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Initialize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Initialize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Initialize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowIndexFilters();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRowRegexFilter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRowSeparatorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getColumnIndexFilters();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getColumnRegexFilter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getColumnSeparatorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
};


/**
 * optional string row_index_filters = 1;
 * @return {string}
 */
proto.Initialize.prototype.getRowIndexFilters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Initialize} returns this
 */
proto.Initialize.prototype.setRowIndexFilters = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string row_regex_filter = 2;
 * @return {string}
 */
proto.Initialize.prototype.getRowRegexFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Initialize} returns this
 */
proto.Initialize.prototype.setRowRegexFilter = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string row_separators = 3;
 * @return {!Array<string>}
 */
proto.Initialize.prototype.getRowSeparatorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Initialize} returns this
 */
proto.Initialize.prototype.setRowSeparatorsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Initialize} returns this
 */
proto.Initialize.prototype.addRowSeparators = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Initialize} returns this
 */
proto.Initialize.prototype.clearRowSeparatorsList = function() {
  return this.setRowSeparatorsList([]);
};


/**
 * optional string column_index_filters = 4;
 * @return {string}
 */
proto.Initialize.prototype.getColumnIndexFilters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Initialize} returns this
 */
proto.Initialize.prototype.setColumnIndexFilters = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string column_regex_filter = 5;
 * @return {string}
 */
proto.Initialize.prototype.getColumnRegexFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Initialize} returns this
 */
proto.Initialize.prototype.setColumnRegexFilter = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string column_separators = 6;
 * @return {!Array<string>}
 */
proto.Initialize.prototype.getColumnSeparatorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Initialize} returns this
 */
proto.Initialize.prototype.setColumnSeparatorsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Initialize} returns this
 */
proto.Initialize.prototype.addColumnSeparators = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Initialize} returns this
 */
proto.Initialize.prototype.clearColumnSeparatorsList = function() {
  return this.setColumnSeparatorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetRowIndexFilters.prototype.toObject = function(opt_includeInstance) {
  return proto.SetRowIndexFilters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetRowIndexFilters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetRowIndexFilters.toObject = function(includeInstance, msg) {
  var f, obj = {
    filters: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetRowIndexFilters}
 */
proto.SetRowIndexFilters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetRowIndexFilters;
  return proto.SetRowIndexFilters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetRowIndexFilters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetRowIndexFilters}
 */
proto.SetRowIndexFilters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetRowIndexFilters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetRowIndexFilters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetRowIndexFilters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetRowIndexFilters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilters();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string filters = 1;
 * @return {string}
 */
proto.SetRowIndexFilters.prototype.getFilters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SetRowIndexFilters} returns this
 */
proto.SetRowIndexFilters.prototype.setFilters = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetRowRegexFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.SetRowRegexFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetRowRegexFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetRowRegexFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetRowRegexFilter}
 */
proto.SetRowRegexFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetRowRegexFilter;
  return proto.SetRowRegexFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetRowRegexFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetRowRegexFilter}
 */
proto.SetRowRegexFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetRowRegexFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetRowRegexFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetRowRegexFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetRowRegexFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string filter = 1;
 * @return {string}
 */
proto.SetRowRegexFilter.prototype.getFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SetRowRegexFilter} returns this
 */
proto.SetRowRegexFilter.prototype.setFilter = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SetRowSeparators.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetRowSeparators.prototype.toObject = function(opt_includeInstance) {
  return proto.SetRowSeparators.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetRowSeparators} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetRowSeparators.toObject = function(includeInstance, msg) {
  var f, obj = {
    separatorsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetRowSeparators}
 */
proto.SetRowSeparators.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetRowSeparators;
  return proto.SetRowSeparators.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetRowSeparators} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetRowSeparators}
 */
proto.SetRowSeparators.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeparators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetRowSeparators.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetRowSeparators.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetRowSeparators} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetRowSeparators.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeparatorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string separators = 1;
 * @return {!Array<string>}
 */
proto.SetRowSeparators.prototype.getSeparatorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SetRowSeparators} returns this
 */
proto.SetRowSeparators.prototype.setSeparatorsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SetRowSeparators} returns this
 */
proto.SetRowSeparators.prototype.addSeparators = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SetRowSeparators} returns this
 */
proto.SetRowSeparators.prototype.clearSeparatorsList = function() {
  return this.setSeparatorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetColumnIndexFilters.prototype.toObject = function(opt_includeInstance) {
  return proto.SetColumnIndexFilters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetColumnIndexFilters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetColumnIndexFilters.toObject = function(includeInstance, msg) {
  var f, obj = {
    filters: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetColumnIndexFilters}
 */
proto.SetColumnIndexFilters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetColumnIndexFilters;
  return proto.SetColumnIndexFilters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetColumnIndexFilters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetColumnIndexFilters}
 */
proto.SetColumnIndexFilters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetColumnIndexFilters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetColumnIndexFilters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetColumnIndexFilters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetColumnIndexFilters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilters();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string filters = 1;
 * @return {string}
 */
proto.SetColumnIndexFilters.prototype.getFilters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SetColumnIndexFilters} returns this
 */
proto.SetColumnIndexFilters.prototype.setFilters = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetColumnRegexFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.SetColumnRegexFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetColumnRegexFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetColumnRegexFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetColumnRegexFilter}
 */
proto.SetColumnRegexFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetColumnRegexFilter;
  return proto.SetColumnRegexFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetColumnRegexFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetColumnRegexFilter}
 */
proto.SetColumnRegexFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetColumnRegexFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetColumnRegexFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetColumnRegexFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetColumnRegexFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string filter = 1;
 * @return {string}
 */
proto.SetColumnRegexFilter.prototype.getFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SetColumnRegexFilter} returns this
 */
proto.SetColumnRegexFilter.prototype.setFilter = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SetColumnSeparators.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetColumnSeparators.prototype.toObject = function(opt_includeInstance) {
  return proto.SetColumnSeparators.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetColumnSeparators} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetColumnSeparators.toObject = function(includeInstance, msg) {
  var f, obj = {
    separatorsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetColumnSeparators}
 */
proto.SetColumnSeparators.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetColumnSeparators;
  return proto.SetColumnSeparators.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetColumnSeparators} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetColumnSeparators}
 */
proto.SetColumnSeparators.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSeparators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetColumnSeparators.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetColumnSeparators.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetColumnSeparators} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetColumnSeparators.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeparatorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string separators = 1;
 * @return {!Array<string>}
 */
proto.SetColumnSeparators.prototype.getSeparatorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.SetColumnSeparators} returns this
 */
proto.SetColumnSeparators.prototype.setSeparatorsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.SetColumnSeparators} returns this
 */
proto.SetColumnSeparators.prototype.addSeparators = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SetColumnSeparators} returns this
 */
proto.SetColumnSeparators.prototype.clearSeparatorsList = function() {
  return this.setSeparatorsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.FromClient.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.FromClient.InnerCase = {
  INNER_NOT_SET: 0,
  INITIALIZE: 1,
  SET_ROW_INDEX_FILTERS: 2,
  SET_ROW_REGEX_FILTER: 3,
  SET_ROW_SEPARATORS: 4,
  SET_COLUMN_INDEX_FILTERS: 5,
  SET_COLUMN_REGEX_FILTER: 6,
  SET_COLUMN_SEPARATORS: 7
};

/**
 * @return {proto.FromClient.InnerCase}
 */
proto.FromClient.prototype.getInnerCase = function() {
  return /** @type {proto.FromClient.InnerCase} */(jspb.Message.computeOneofCase(this, proto.FromClient.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FromClient.prototype.toObject = function(opt_includeInstance) {
  return proto.FromClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FromClient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FromClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialize: (f = msg.getInitialize()) && proto.Initialize.toObject(includeInstance, f),
    setRowIndexFilters: (f = msg.getSetRowIndexFilters()) && proto.SetRowIndexFilters.toObject(includeInstance, f),
    setRowRegexFilter: (f = msg.getSetRowRegexFilter()) && proto.SetRowRegexFilter.toObject(includeInstance, f),
    setRowSeparators: (f = msg.getSetRowSeparators()) && proto.SetRowSeparators.toObject(includeInstance, f),
    setColumnIndexFilters: (f = msg.getSetColumnIndexFilters()) && proto.SetColumnIndexFilters.toObject(includeInstance, f),
    setColumnRegexFilter: (f = msg.getSetColumnRegexFilter()) && proto.SetColumnRegexFilter.toObject(includeInstance, f),
    setColumnSeparators: (f = msg.getSetColumnSeparators()) && proto.SetColumnSeparators.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FromClient}
 */
proto.FromClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FromClient;
  return proto.FromClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FromClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FromClient}
 */
proto.FromClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Initialize;
      reader.readMessage(value,proto.Initialize.deserializeBinaryFromReader);
      msg.setInitialize(value);
      break;
    case 2:
      var value = new proto.SetRowIndexFilters;
      reader.readMessage(value,proto.SetRowIndexFilters.deserializeBinaryFromReader);
      msg.setSetRowIndexFilters(value);
      break;
    case 3:
      var value = new proto.SetRowRegexFilter;
      reader.readMessage(value,proto.SetRowRegexFilter.deserializeBinaryFromReader);
      msg.setSetRowRegexFilter(value);
      break;
    case 4:
      var value = new proto.SetRowSeparators;
      reader.readMessage(value,proto.SetRowSeparators.deserializeBinaryFromReader);
      msg.setSetRowSeparators(value);
      break;
    case 5:
      var value = new proto.SetColumnIndexFilters;
      reader.readMessage(value,proto.SetColumnIndexFilters.deserializeBinaryFromReader);
      msg.setSetColumnIndexFilters(value);
      break;
    case 6:
      var value = new proto.SetColumnRegexFilter;
      reader.readMessage(value,proto.SetColumnRegexFilter.deserializeBinaryFromReader);
      msg.setSetColumnRegexFilter(value);
      break;
    case 7:
      var value = new proto.SetColumnSeparators;
      reader.readMessage(value,proto.SetColumnSeparators.deserializeBinaryFromReader);
      msg.setSetColumnSeparators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FromClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FromClient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FromClient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FromClient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialize();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Initialize.serializeBinaryToWriter
    );
  }
  f = message.getSetRowIndexFilters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SetRowIndexFilters.serializeBinaryToWriter
    );
  }
  f = message.getSetRowRegexFilter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SetRowRegexFilter.serializeBinaryToWriter
    );
  }
  f = message.getSetRowSeparators();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SetRowSeparators.serializeBinaryToWriter
    );
  }
  f = message.getSetColumnIndexFilters();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SetColumnIndexFilters.serializeBinaryToWriter
    );
  }
  f = message.getSetColumnRegexFilter();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.SetColumnRegexFilter.serializeBinaryToWriter
    );
  }
  f = message.getSetColumnSeparators();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.SetColumnSeparators.serializeBinaryToWriter
    );
  }
};


/**
 * optional Initialize initialize = 1;
 * @return {?proto.Initialize}
 */
proto.FromClient.prototype.getInitialize = function() {
  return /** @type{?proto.Initialize} */ (
    jspb.Message.getWrapperField(this, proto.Initialize, 1));
};


/**
 * @param {?proto.Initialize|undefined} value
 * @return {!proto.FromClient} returns this
*/
proto.FromClient.prototype.setInitialize = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.FromClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FromClient} returns this
 */
proto.FromClient.prototype.clearInitialize = function() {
  return this.setInitialize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FromClient.prototype.hasInitialize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SetRowIndexFilters set_row_index_filters = 2;
 * @return {?proto.SetRowIndexFilters}
 */
proto.FromClient.prototype.getSetRowIndexFilters = function() {
  return /** @type{?proto.SetRowIndexFilters} */ (
    jspb.Message.getWrapperField(this, proto.SetRowIndexFilters, 2));
};


/**
 * @param {?proto.SetRowIndexFilters|undefined} value
 * @return {!proto.FromClient} returns this
*/
proto.FromClient.prototype.setSetRowIndexFilters = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.FromClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FromClient} returns this
 */
proto.FromClient.prototype.clearSetRowIndexFilters = function() {
  return this.setSetRowIndexFilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FromClient.prototype.hasSetRowIndexFilters = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SetRowRegexFilter set_row_regex_filter = 3;
 * @return {?proto.SetRowRegexFilter}
 */
proto.FromClient.prototype.getSetRowRegexFilter = function() {
  return /** @type{?proto.SetRowRegexFilter} */ (
    jspb.Message.getWrapperField(this, proto.SetRowRegexFilter, 3));
};


/**
 * @param {?proto.SetRowRegexFilter|undefined} value
 * @return {!proto.FromClient} returns this
*/
proto.FromClient.prototype.setSetRowRegexFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.FromClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FromClient} returns this
 */
proto.FromClient.prototype.clearSetRowRegexFilter = function() {
  return this.setSetRowRegexFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FromClient.prototype.hasSetRowRegexFilter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SetRowSeparators set_row_separators = 4;
 * @return {?proto.SetRowSeparators}
 */
proto.FromClient.prototype.getSetRowSeparators = function() {
  return /** @type{?proto.SetRowSeparators} */ (
    jspb.Message.getWrapperField(this, proto.SetRowSeparators, 4));
};


/**
 * @param {?proto.SetRowSeparators|undefined} value
 * @return {!proto.FromClient} returns this
*/
proto.FromClient.prototype.setSetRowSeparators = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.FromClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FromClient} returns this
 */
proto.FromClient.prototype.clearSetRowSeparators = function() {
  return this.setSetRowSeparators(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FromClient.prototype.hasSetRowSeparators = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SetColumnIndexFilters set_column_index_filters = 5;
 * @return {?proto.SetColumnIndexFilters}
 */
proto.FromClient.prototype.getSetColumnIndexFilters = function() {
  return /** @type{?proto.SetColumnIndexFilters} */ (
    jspb.Message.getWrapperField(this, proto.SetColumnIndexFilters, 5));
};


/**
 * @param {?proto.SetColumnIndexFilters|undefined} value
 * @return {!proto.FromClient} returns this
*/
proto.FromClient.prototype.setSetColumnIndexFilters = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.FromClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FromClient} returns this
 */
proto.FromClient.prototype.clearSetColumnIndexFilters = function() {
  return this.setSetColumnIndexFilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FromClient.prototype.hasSetColumnIndexFilters = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SetColumnRegexFilter set_column_regex_filter = 6;
 * @return {?proto.SetColumnRegexFilter}
 */
proto.FromClient.prototype.getSetColumnRegexFilter = function() {
  return /** @type{?proto.SetColumnRegexFilter} */ (
    jspb.Message.getWrapperField(this, proto.SetColumnRegexFilter, 6));
};


/**
 * @param {?proto.SetColumnRegexFilter|undefined} value
 * @return {!proto.FromClient} returns this
*/
proto.FromClient.prototype.setSetColumnRegexFilter = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.FromClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FromClient} returns this
 */
proto.FromClient.prototype.clearSetColumnRegexFilter = function() {
  return this.setSetColumnRegexFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FromClient.prototype.hasSetColumnRegexFilter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SetColumnSeparators set_column_separators = 7;
 * @return {?proto.SetColumnSeparators}
 */
proto.FromClient.prototype.getSetColumnSeparators = function() {
  return /** @type{?proto.SetColumnSeparators} */ (
    jspb.Message.getWrapperField(this, proto.SetColumnSeparators, 7));
};


/**
 * @param {?proto.SetColumnSeparators|undefined} value
 * @return {!proto.FromClient} returns this
*/
proto.FromClient.prototype.setSetColumnSeparators = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.FromClient.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FromClient} returns this
 */
proto.FromClient.prototype.clearSetColumnSeparators = function() {
  return this.setSetColumnSeparators(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FromClient.prototype.hasSetColumnSeparators = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto);
