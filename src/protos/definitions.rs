// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `definitions.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct UnexpectedError {
    // message fields
    pub description: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnexpectedError {
    fn default() -> &'a UnexpectedError {
        <UnexpectedError as ::protobuf::Message>::default_instance()
    }
}

impl UnexpectedError {
    pub fn new() -> UnexpectedError {
        ::std::default::Default::default()
    }

    // string description = 1;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UnexpectedError {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.description.is_empty() {
            os.write_string(1, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnexpectedError {
        UnexpectedError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &UnexpectedError| { &m.description },
                |m: &mut UnexpectedError| { &mut m.description },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnexpectedError>(
                "UnexpectedError",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnexpectedError {
        static instance: ::protobuf::rt::LazyV2<UnexpectedError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnexpectedError::new)
    }
}

impl ::protobuf::Clear for UnexpectedError {
    fn clear(&mut self) {
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnexpectedError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnexpectedError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FromServer {
    // message oneof groups
    pub inner: ::std::option::Option<FromServer_oneof_inner>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FromServer {
    fn default() -> &'a FromServer {
        <FromServer as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum FromServer_oneof_inner {
    output(::std::vec::Vec<u8>),
    unexpected_error(UnexpectedError),
}

impl FromServer {
    pub fn new() -> FromServer {
        ::std::default::Default::default()
    }

    // bytes output = 1;


    pub fn get_output(&self) -> &[u8] {
        match self.inner {
            ::std::option::Option::Some(FromServer_oneof_inner::output(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_output(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_output(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromServer_oneof_inner::output(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: ::std::vec::Vec<u8>) {
        self.inner = ::std::option::Option::Some(FromServer_oneof_inner::output(v))
    }

    // Mutable pointer to the field.
    pub fn mut_output(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(FromServer_oneof_inner::output(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromServer_oneof_inner::output(::std::vec::Vec::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromServer_oneof_inner::output(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_output(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_output() {
            match self.inner.take() {
                ::std::option::Option::Some(FromServer_oneof_inner::output(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .UnexpectedError unexpected_error = 2;


    pub fn get_unexpected_error(&self) -> &UnexpectedError {
        match self.inner {
            ::std::option::Option::Some(FromServer_oneof_inner::unexpected_error(ref v)) => v,
            _ => <UnexpectedError as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_unexpected_error(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_unexpected_error(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromServer_oneof_inner::unexpected_error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unexpected_error(&mut self, v: UnexpectedError) {
        self.inner = ::std::option::Option::Some(FromServer_oneof_inner::unexpected_error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unexpected_error(&mut self) -> &mut UnexpectedError {
        if let ::std::option::Option::Some(FromServer_oneof_inner::unexpected_error(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromServer_oneof_inner::unexpected_error(UnexpectedError::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromServer_oneof_inner::unexpected_error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unexpected_error(&mut self) -> UnexpectedError {
        if self.has_unexpected_error() {
            match self.inner.take() {
                ::std::option::Option::Some(FromServer_oneof_inner::unexpected_error(v)) => v,
                _ => panic!(),
            }
        } else {
            UnexpectedError::new()
        }
    }
}

impl ::protobuf::Message for FromServer {
    fn is_initialized(&self) -> bool {
        if let Some(FromServer_oneof_inner::unexpected_error(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromServer_oneof_inner::output(is.read_bytes()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromServer_oneof_inner::unexpected_error(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.inner {
            match v {
                &FromServer_oneof_inner::output(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &FromServer_oneof_inner::unexpected_error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.inner {
            match v {
                &FromServer_oneof_inner::output(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &FromServer_oneof_inner::unexpected_error(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FromServer {
        FromServer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "output",
                FromServer::has_output,
                FromServer::get_output,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, UnexpectedError>(
                "unexpected_error",
                FromServer::has_unexpected_error,
                FromServer::get_unexpected_error,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FromServer>(
                "FromServer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FromServer {
        static instance: ::protobuf::rt::LazyV2<FromServer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FromServer::new)
    }
}

impl ::protobuf::Clear for FromServer {
    fn clear(&mut self) {
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FromServer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FromServer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct And {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a And {
    fn default() -> &'a And {
        <And as ::protobuf::Message>::default_instance()
    }
}

impl And {
    pub fn new() -> And {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for And {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> And {
        And::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<And>(
                "And",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static And {
        static instance: ::protobuf::rt::LazyV2<And> = ::protobuf::rt::LazyV2::INIT;
        instance.get(And::new)
    }
}

impl ::protobuf::Clear for And {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for And {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for And {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Or {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Or {
    fn default() -> &'a Or {
        <Or as ::protobuf::Message>::default_instance()
    }
}

impl Or {
    pub fn new() -> Or {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Or {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Or {
        Or::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Or>(
                "Or",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Or {
        static instance: ::protobuf::rt::LazyV2<Or> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Or::new)
    }
}

impl ::protobuf::Clear for Or {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Or {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Or {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Combination {
    // message oneof groups
    pub inner: ::std::option::Option<Combination_oneof_inner>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Combination {
    fn default() -> &'a Combination {
        <Combination as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Combination_oneof_inner {
    and(And),
    or(Or),
}

impl Combination {
    pub fn new() -> Combination {
        ::std::default::Default::default()
    }

    // .And and = 1;


    pub fn get_and(&self) -> &And {
        match self.inner {
            ::std::option::Option::Some(Combination_oneof_inner::and(ref v)) => v,
            _ => <And as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_and(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_and(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(Combination_oneof_inner::and(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_and(&mut self, v: And) {
        self.inner = ::std::option::Option::Some(Combination_oneof_inner::and(v))
    }

    // Mutable pointer to the field.
    pub fn mut_and(&mut self) -> &mut And {
        if let ::std::option::Option::Some(Combination_oneof_inner::and(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(Combination_oneof_inner::and(And::new()));
        }
        match self.inner {
            ::std::option::Option::Some(Combination_oneof_inner::and(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_and(&mut self) -> And {
        if self.has_and() {
            match self.inner.take() {
                ::std::option::Option::Some(Combination_oneof_inner::and(v)) => v,
                _ => panic!(),
            }
        } else {
            And::new()
        }
    }

    // .Or or = 2;


    pub fn get_or(&self) -> &Or {
        match self.inner {
            ::std::option::Option::Some(Combination_oneof_inner::or(ref v)) => v,
            _ => <Or as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_or(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_or(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(Combination_oneof_inner::or(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_or(&mut self, v: Or) {
        self.inner = ::std::option::Option::Some(Combination_oneof_inner::or(v))
    }

    // Mutable pointer to the field.
    pub fn mut_or(&mut self) -> &mut Or {
        if let ::std::option::Option::Some(Combination_oneof_inner::or(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(Combination_oneof_inner::or(Or::new()));
        }
        match self.inner {
            ::std::option::Option::Some(Combination_oneof_inner::or(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_or(&mut self) -> Or {
        if self.has_or() {
            match self.inner.take() {
                ::std::option::Option::Some(Combination_oneof_inner::or(v)) => v,
                _ => panic!(),
            }
        } else {
            Or::new()
        }
    }
}

impl ::protobuf::Message for Combination {
    fn is_initialized(&self) -> bool {
        if let Some(Combination_oneof_inner::and(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Combination_oneof_inner::or(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(Combination_oneof_inner::and(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(Combination_oneof_inner::or(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.inner {
            match v {
                &Combination_oneof_inner::and(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Combination_oneof_inner::or(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.inner {
            match v {
                &Combination_oneof_inner::and(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Combination_oneof_inner::or(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Combination {
        Combination::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, And>(
                "and",
                Combination::has_and,
                Combination::get_and,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Or>(
                "or",
                Combination::has_or,
                Combination::get_or,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Combination>(
                "Combination",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Combination {
        static instance: ::protobuf::rt::LazyV2<Combination> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Combination::new)
    }
}

impl ::protobuf::Clear for Combination {
    fn clear(&mut self) {
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Combination {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Combination {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Initialize {
    // message fields
    pub row_index_filters: ::std::string::String,
    pub row_regex_filter: ::std::string::String,
    pub row_filter_combination: ::protobuf::SingularPtrField<Combination>,
    pub row_separators: ::protobuf::RepeatedField<::std::string::String>,
    pub row_regex_separator: ::std::string::String,
    pub column_index_filters: ::std::string::String,
    pub column_regex_filter: ::std::string::String,
    pub column_filter_combination: ::protobuf::SingularPtrField<Combination>,
    pub column_separators: ::protobuf::RepeatedField<::std::string::String>,
    pub column_regex_separator: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Initialize {
    fn default() -> &'a Initialize {
        <Initialize as ::protobuf::Message>::default_instance()
    }
}

impl Initialize {
    pub fn new() -> Initialize {
        ::std::default::Default::default()
    }

    // string row_index_filters = 1;


    pub fn get_row_index_filters(&self) -> &str {
        &self.row_index_filters
    }
    pub fn clear_row_index_filters(&mut self) {
        self.row_index_filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_index_filters(&mut self, v: ::std::string::String) {
        self.row_index_filters = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_index_filters(&mut self) -> &mut ::std::string::String {
        &mut self.row_index_filters
    }

    // Take field
    pub fn take_row_index_filters(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row_index_filters, ::std::string::String::new())
    }

    // string row_regex_filter = 2;


    pub fn get_row_regex_filter(&self) -> &str {
        &self.row_regex_filter
    }
    pub fn clear_row_regex_filter(&mut self) {
        self.row_regex_filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_regex_filter(&mut self, v: ::std::string::String) {
        self.row_regex_filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_regex_filter(&mut self) -> &mut ::std::string::String {
        &mut self.row_regex_filter
    }

    // Take field
    pub fn take_row_regex_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row_regex_filter, ::std::string::String::new())
    }

    // .Combination row_filter_combination = 3;


    pub fn get_row_filter_combination(&self) -> &Combination {
        self.row_filter_combination.as_ref().unwrap_or_else(|| <Combination as ::protobuf::Message>::default_instance())
    }
    pub fn clear_row_filter_combination(&mut self) {
        self.row_filter_combination.clear();
    }

    pub fn has_row_filter_combination(&self) -> bool {
        self.row_filter_combination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_row_filter_combination(&mut self, v: Combination) {
        self.row_filter_combination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_filter_combination(&mut self) -> &mut Combination {
        if self.row_filter_combination.is_none() {
            self.row_filter_combination.set_default();
        }
        self.row_filter_combination.as_mut().unwrap()
    }

    // Take field
    pub fn take_row_filter_combination(&mut self) -> Combination {
        self.row_filter_combination.take().unwrap_or_else(|| Combination::new())
    }

    // repeated string row_separators = 4;


    pub fn get_row_separators(&self) -> &[::std::string::String] {
        &self.row_separators
    }
    pub fn clear_row_separators(&mut self) {
        self.row_separators.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_separators(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.row_separators = v;
    }

    // Mutable pointer to the field.
    pub fn mut_row_separators(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.row_separators
    }

    // Take field
    pub fn take_row_separators(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.row_separators, ::protobuf::RepeatedField::new())
    }

    // string row_regex_separator = 5;


    pub fn get_row_regex_separator(&self) -> &str {
        &self.row_regex_separator
    }
    pub fn clear_row_regex_separator(&mut self) {
        self.row_regex_separator.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_regex_separator(&mut self, v: ::std::string::String) {
        self.row_regex_separator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_regex_separator(&mut self) -> &mut ::std::string::String {
        &mut self.row_regex_separator
    }

    // Take field
    pub fn take_row_regex_separator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.row_regex_separator, ::std::string::String::new())
    }

    // string column_index_filters = 6;


    pub fn get_column_index_filters(&self) -> &str {
        &self.column_index_filters
    }
    pub fn clear_column_index_filters(&mut self) {
        self.column_index_filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_index_filters(&mut self, v: ::std::string::String) {
        self.column_index_filters = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_index_filters(&mut self) -> &mut ::std::string::String {
        &mut self.column_index_filters
    }

    // Take field
    pub fn take_column_index_filters(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column_index_filters, ::std::string::String::new())
    }

    // string column_regex_filter = 7;


    pub fn get_column_regex_filter(&self) -> &str {
        &self.column_regex_filter
    }
    pub fn clear_column_regex_filter(&mut self) {
        self.column_regex_filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_regex_filter(&mut self, v: ::std::string::String) {
        self.column_regex_filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_regex_filter(&mut self) -> &mut ::std::string::String {
        &mut self.column_regex_filter
    }

    // Take field
    pub fn take_column_regex_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column_regex_filter, ::std::string::String::new())
    }

    // .Combination column_filter_combination = 8;


    pub fn get_column_filter_combination(&self) -> &Combination {
        self.column_filter_combination.as_ref().unwrap_or_else(|| <Combination as ::protobuf::Message>::default_instance())
    }
    pub fn clear_column_filter_combination(&mut self) {
        self.column_filter_combination.clear();
    }

    pub fn has_column_filter_combination(&self) -> bool {
        self.column_filter_combination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_column_filter_combination(&mut self, v: Combination) {
        self.column_filter_combination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_filter_combination(&mut self) -> &mut Combination {
        if self.column_filter_combination.is_none() {
            self.column_filter_combination.set_default();
        }
        self.column_filter_combination.as_mut().unwrap()
    }

    // Take field
    pub fn take_column_filter_combination(&mut self) -> Combination {
        self.column_filter_combination.take().unwrap_or_else(|| Combination::new())
    }

    // repeated string column_separators = 9;


    pub fn get_column_separators(&self) -> &[::std::string::String] {
        &self.column_separators
    }
    pub fn clear_column_separators(&mut self) {
        self.column_separators.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_separators(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.column_separators = v;
    }

    // Mutable pointer to the field.
    pub fn mut_column_separators(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.column_separators
    }

    // Take field
    pub fn take_column_separators(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.column_separators, ::protobuf::RepeatedField::new())
    }

    // string column_regex_separator = 10;


    pub fn get_column_regex_separator(&self) -> &str {
        &self.column_regex_separator
    }
    pub fn clear_column_regex_separator(&mut self) {
        self.column_regex_separator.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_regex_separator(&mut self, v: ::std::string::String) {
        self.column_regex_separator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column_regex_separator(&mut self) -> &mut ::std::string::String {
        &mut self.column_regex_separator
    }

    // Take field
    pub fn take_column_regex_separator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.column_regex_separator, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Initialize {
    fn is_initialized(&self) -> bool {
        for v in &self.row_filter_combination {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.column_filter_combination {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row_index_filters)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row_regex_filter)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.row_filter_combination)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.row_separators)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.row_regex_separator)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column_index_filters)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column_regex_filter)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.column_filter_combination)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.column_separators)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.column_regex_separator)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.row_index_filters.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.row_index_filters);
        }
        if !self.row_regex_filter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.row_regex_filter);
        }
        if let Some(ref v) = self.row_filter_combination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.row_separators {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.row_regex_separator.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.row_regex_separator);
        }
        if !self.column_index_filters.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.column_index_filters);
        }
        if !self.column_regex_filter.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.column_regex_filter);
        }
        if let Some(ref v) = self.column_filter_combination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.column_separators {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        if !self.column_regex_separator.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.column_regex_separator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.row_index_filters.is_empty() {
            os.write_string(1, &self.row_index_filters)?;
        }
        if !self.row_regex_filter.is_empty() {
            os.write_string(2, &self.row_regex_filter)?;
        }
        if let Some(ref v) = self.row_filter_combination.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.row_separators {
            os.write_string(4, &v)?;
        };
        if !self.row_regex_separator.is_empty() {
            os.write_string(5, &self.row_regex_separator)?;
        }
        if !self.column_index_filters.is_empty() {
            os.write_string(6, &self.column_index_filters)?;
        }
        if !self.column_regex_filter.is_empty() {
            os.write_string(7, &self.column_regex_filter)?;
        }
        if let Some(ref v) = self.column_filter_combination.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.column_separators {
            os.write_string(9, &v)?;
        };
        if !self.column_regex_separator.is_empty() {
            os.write_string(10, &self.column_regex_separator)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Initialize {
        Initialize::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "row_index_filters",
                |m: &Initialize| { &m.row_index_filters },
                |m: &mut Initialize| { &mut m.row_index_filters },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "row_regex_filter",
                |m: &Initialize| { &m.row_regex_filter },
                |m: &mut Initialize| { &mut m.row_regex_filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Combination>>(
                "row_filter_combination",
                |m: &Initialize| { &m.row_filter_combination },
                |m: &mut Initialize| { &mut m.row_filter_combination },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "row_separators",
                |m: &Initialize| { &m.row_separators },
                |m: &mut Initialize| { &mut m.row_separators },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "row_regex_separator",
                |m: &Initialize| { &m.row_regex_separator },
                |m: &mut Initialize| { &mut m.row_regex_separator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "column_index_filters",
                |m: &Initialize| { &m.column_index_filters },
                |m: &mut Initialize| { &mut m.column_index_filters },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "column_regex_filter",
                |m: &Initialize| { &m.column_regex_filter },
                |m: &mut Initialize| { &mut m.column_regex_filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Combination>>(
                "column_filter_combination",
                |m: &Initialize| { &m.column_filter_combination },
                |m: &mut Initialize| { &mut m.column_filter_combination },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "column_separators",
                |m: &Initialize| { &m.column_separators },
                |m: &mut Initialize| { &mut m.column_separators },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "column_regex_separator",
                |m: &Initialize| { &m.column_regex_separator },
                |m: &mut Initialize| { &mut m.column_regex_separator },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Initialize>(
                "Initialize",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Initialize {
        static instance: ::protobuf::rt::LazyV2<Initialize> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Initialize::new)
    }
}

impl ::protobuf::Clear for Initialize {
    fn clear(&mut self) {
        self.row_index_filters.clear();
        self.row_regex_filter.clear();
        self.row_filter_combination.clear();
        self.row_separators.clear();
        self.row_regex_separator.clear();
        self.column_index_filters.clear();
        self.column_regex_filter.clear();
        self.column_filter_combination.clear();
        self.column_separators.clear();
        self.column_regex_separator.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Initialize {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Initialize {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetRowIndexFilters {
    // message fields
    pub filters: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetRowIndexFilters {
    fn default() -> &'a SetRowIndexFilters {
        <SetRowIndexFilters as ::protobuf::Message>::default_instance()
    }
}

impl SetRowIndexFilters {
    pub fn new() -> SetRowIndexFilters {
        ::std::default::Default::default()
    }

    // string filters = 1;


    pub fn get_filters(&self) -> &str {
        &self.filters
    }
    pub fn clear_filters(&mut self) {
        self.filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_filters(&mut self, v: ::std::string::String) {
        self.filters = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filters(&mut self) -> &mut ::std::string::String {
        &mut self.filters
    }

    // Take field
    pub fn take_filters(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filters, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetRowIndexFilters {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.filters.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filters);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.filters.is_empty() {
            os.write_string(1, &self.filters)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetRowIndexFilters {
        SetRowIndexFilters::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filters",
                |m: &SetRowIndexFilters| { &m.filters },
                |m: &mut SetRowIndexFilters| { &mut m.filters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetRowIndexFilters>(
                "SetRowIndexFilters",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetRowIndexFilters {
        static instance: ::protobuf::rt::LazyV2<SetRowIndexFilters> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetRowIndexFilters::new)
    }
}

impl ::protobuf::Clear for SetRowIndexFilters {
    fn clear(&mut self) {
        self.filters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetRowIndexFilters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetRowIndexFilters {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetRowRegexFilter {
    // message fields
    pub filter: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetRowRegexFilter {
    fn default() -> &'a SetRowRegexFilter {
        <SetRowRegexFilter as ::protobuf::Message>::default_instance()
    }
}

impl SetRowRegexFilter {
    pub fn new() -> SetRowRegexFilter {
        ::std::default::Default::default()
    }

    // string filter = 1;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetRowRegexFilter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.filter.is_empty() {
            os.write_string(1, &self.filter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetRowRegexFilter {
        SetRowRegexFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &SetRowRegexFilter| { &m.filter },
                |m: &mut SetRowRegexFilter| { &mut m.filter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetRowRegexFilter>(
                "SetRowRegexFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetRowRegexFilter {
        static instance: ::protobuf::rt::LazyV2<SetRowRegexFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetRowRegexFilter::new)
    }
}

impl ::protobuf::Clear for SetRowRegexFilter {
    fn clear(&mut self) {
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetRowRegexFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetRowRegexFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetRowFilterCombination {
    // message fields
    pub combination: ::protobuf::SingularPtrField<Combination>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetRowFilterCombination {
    fn default() -> &'a SetRowFilterCombination {
        <SetRowFilterCombination as ::protobuf::Message>::default_instance()
    }
}

impl SetRowFilterCombination {
    pub fn new() -> SetRowFilterCombination {
        ::std::default::Default::default()
    }

    // .Combination combination = 1;


    pub fn get_combination(&self) -> &Combination {
        self.combination.as_ref().unwrap_or_else(|| <Combination as ::protobuf::Message>::default_instance())
    }
    pub fn clear_combination(&mut self) {
        self.combination.clear();
    }

    pub fn has_combination(&self) -> bool {
        self.combination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_combination(&mut self, v: Combination) {
        self.combination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_combination(&mut self) -> &mut Combination {
        if self.combination.is_none() {
            self.combination.set_default();
        }
        self.combination.as_mut().unwrap()
    }

    // Take field
    pub fn take_combination(&mut self) -> Combination {
        self.combination.take().unwrap_or_else(|| Combination::new())
    }
}

impl ::protobuf::Message for SetRowFilterCombination {
    fn is_initialized(&self) -> bool {
        for v in &self.combination {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.combination)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.combination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.combination.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetRowFilterCombination {
        SetRowFilterCombination::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Combination>>(
                "combination",
                |m: &SetRowFilterCombination| { &m.combination },
                |m: &mut SetRowFilterCombination| { &mut m.combination },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetRowFilterCombination>(
                "SetRowFilterCombination",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetRowFilterCombination {
        static instance: ::protobuf::rt::LazyV2<SetRowFilterCombination> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetRowFilterCombination::new)
    }
}

impl ::protobuf::Clear for SetRowFilterCombination {
    fn clear(&mut self) {
        self.combination.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetRowFilterCombination {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetRowFilterCombination {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetRowSeparators {
    // message fields
    pub separators: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetRowSeparators {
    fn default() -> &'a SetRowSeparators {
        <SetRowSeparators as ::protobuf::Message>::default_instance()
    }
}

impl SetRowSeparators {
    pub fn new() -> SetRowSeparators {
        ::std::default::Default::default()
    }

    // repeated string separators = 1;


    pub fn get_separators(&self) -> &[::std::string::String] {
        &self.separators
    }
    pub fn clear_separators(&mut self) {
        self.separators.clear();
    }

    // Param is passed by value, moved
    pub fn set_separators(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.separators = v;
    }

    // Mutable pointer to the field.
    pub fn mut_separators(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.separators
    }

    // Take field
    pub fn take_separators(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.separators, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SetRowSeparators {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.separators)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.separators {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.separators {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetRowSeparators {
        SetRowSeparators::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "separators",
                |m: &SetRowSeparators| { &m.separators },
                |m: &mut SetRowSeparators| { &mut m.separators },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetRowSeparators>(
                "SetRowSeparators",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetRowSeparators {
        static instance: ::protobuf::rt::LazyV2<SetRowSeparators> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetRowSeparators::new)
    }
}

impl ::protobuf::Clear for SetRowSeparators {
    fn clear(&mut self) {
        self.separators.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetRowSeparators {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetRowSeparators {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetRowRegexSeparator {
    // message fields
    pub separator: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetRowRegexSeparator {
    fn default() -> &'a SetRowRegexSeparator {
        <SetRowRegexSeparator as ::protobuf::Message>::default_instance()
    }
}

impl SetRowRegexSeparator {
    pub fn new() -> SetRowRegexSeparator {
        ::std::default::Default::default()
    }

    // string separator = 1;


    pub fn get_separator(&self) -> &str {
        &self.separator
    }
    pub fn clear_separator(&mut self) {
        self.separator.clear();
    }

    // Param is passed by value, moved
    pub fn set_separator(&mut self, v: ::std::string::String) {
        self.separator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_separator(&mut self) -> &mut ::std::string::String {
        &mut self.separator
    }

    // Take field
    pub fn take_separator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.separator, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetRowRegexSeparator {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.separator)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.separator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.separator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.separator.is_empty() {
            os.write_string(1, &self.separator)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetRowRegexSeparator {
        SetRowRegexSeparator::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "separator",
                |m: &SetRowRegexSeparator| { &m.separator },
                |m: &mut SetRowRegexSeparator| { &mut m.separator },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetRowRegexSeparator>(
                "SetRowRegexSeparator",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetRowRegexSeparator {
        static instance: ::protobuf::rt::LazyV2<SetRowRegexSeparator> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetRowRegexSeparator::new)
    }
}

impl ::protobuf::Clear for SetRowRegexSeparator {
    fn clear(&mut self) {
        self.separator.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetRowRegexSeparator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetRowRegexSeparator {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetColumnIndexFilters {
    // message fields
    pub filters: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetColumnIndexFilters {
    fn default() -> &'a SetColumnIndexFilters {
        <SetColumnIndexFilters as ::protobuf::Message>::default_instance()
    }
}

impl SetColumnIndexFilters {
    pub fn new() -> SetColumnIndexFilters {
        ::std::default::Default::default()
    }

    // string filters = 1;


    pub fn get_filters(&self) -> &str {
        &self.filters
    }
    pub fn clear_filters(&mut self) {
        self.filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_filters(&mut self, v: ::std::string::String) {
        self.filters = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filters(&mut self) -> &mut ::std::string::String {
        &mut self.filters
    }

    // Take field
    pub fn take_filters(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filters, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetColumnIndexFilters {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.filters.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filters);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.filters.is_empty() {
            os.write_string(1, &self.filters)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetColumnIndexFilters {
        SetColumnIndexFilters::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filters",
                |m: &SetColumnIndexFilters| { &m.filters },
                |m: &mut SetColumnIndexFilters| { &mut m.filters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetColumnIndexFilters>(
                "SetColumnIndexFilters",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetColumnIndexFilters {
        static instance: ::protobuf::rt::LazyV2<SetColumnIndexFilters> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetColumnIndexFilters::new)
    }
}

impl ::protobuf::Clear for SetColumnIndexFilters {
    fn clear(&mut self) {
        self.filters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetColumnIndexFilters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetColumnIndexFilters {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetColumnRegexFilter {
    // message fields
    pub filter: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetColumnRegexFilter {
    fn default() -> &'a SetColumnRegexFilter {
        <SetColumnRegexFilter as ::protobuf::Message>::default_instance()
    }
}

impl SetColumnRegexFilter {
    pub fn new() -> SetColumnRegexFilter {
        ::std::default::Default::default()
    }

    // string filter = 1;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetColumnRegexFilter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.filter.is_empty() {
            os.write_string(1, &self.filter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetColumnRegexFilter {
        SetColumnRegexFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &SetColumnRegexFilter| { &m.filter },
                |m: &mut SetColumnRegexFilter| { &mut m.filter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetColumnRegexFilter>(
                "SetColumnRegexFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetColumnRegexFilter {
        static instance: ::protobuf::rt::LazyV2<SetColumnRegexFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetColumnRegexFilter::new)
    }
}

impl ::protobuf::Clear for SetColumnRegexFilter {
    fn clear(&mut self) {
        self.filter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetColumnRegexFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetColumnRegexFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetColumnFilterCombination {
    // message fields
    pub combination: ::protobuf::SingularPtrField<Combination>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetColumnFilterCombination {
    fn default() -> &'a SetColumnFilterCombination {
        <SetColumnFilterCombination as ::protobuf::Message>::default_instance()
    }
}

impl SetColumnFilterCombination {
    pub fn new() -> SetColumnFilterCombination {
        ::std::default::Default::default()
    }

    // .Combination combination = 1;


    pub fn get_combination(&self) -> &Combination {
        self.combination.as_ref().unwrap_or_else(|| <Combination as ::protobuf::Message>::default_instance())
    }
    pub fn clear_combination(&mut self) {
        self.combination.clear();
    }

    pub fn has_combination(&self) -> bool {
        self.combination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_combination(&mut self, v: Combination) {
        self.combination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_combination(&mut self) -> &mut Combination {
        if self.combination.is_none() {
            self.combination.set_default();
        }
        self.combination.as_mut().unwrap()
    }

    // Take field
    pub fn take_combination(&mut self) -> Combination {
        self.combination.take().unwrap_or_else(|| Combination::new())
    }
}

impl ::protobuf::Message for SetColumnFilterCombination {
    fn is_initialized(&self) -> bool {
        for v in &self.combination {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.combination)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.combination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.combination.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetColumnFilterCombination {
        SetColumnFilterCombination::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Combination>>(
                "combination",
                |m: &SetColumnFilterCombination| { &m.combination },
                |m: &mut SetColumnFilterCombination| { &mut m.combination },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetColumnFilterCombination>(
                "SetColumnFilterCombination",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetColumnFilterCombination {
        static instance: ::protobuf::rt::LazyV2<SetColumnFilterCombination> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetColumnFilterCombination::new)
    }
}

impl ::protobuf::Clear for SetColumnFilterCombination {
    fn clear(&mut self) {
        self.combination.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetColumnFilterCombination {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetColumnFilterCombination {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetColumnSeparators {
    // message fields
    pub separators: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetColumnSeparators {
    fn default() -> &'a SetColumnSeparators {
        <SetColumnSeparators as ::protobuf::Message>::default_instance()
    }
}

impl SetColumnSeparators {
    pub fn new() -> SetColumnSeparators {
        ::std::default::Default::default()
    }

    // repeated string separators = 1;


    pub fn get_separators(&self) -> &[::std::string::String] {
        &self.separators
    }
    pub fn clear_separators(&mut self) {
        self.separators.clear();
    }

    // Param is passed by value, moved
    pub fn set_separators(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.separators = v;
    }

    // Mutable pointer to the field.
    pub fn mut_separators(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.separators
    }

    // Take field
    pub fn take_separators(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.separators, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SetColumnSeparators {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.separators)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.separators {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.separators {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetColumnSeparators {
        SetColumnSeparators::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "separators",
                |m: &SetColumnSeparators| { &m.separators },
                |m: &mut SetColumnSeparators| { &mut m.separators },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetColumnSeparators>(
                "SetColumnSeparators",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetColumnSeparators {
        static instance: ::protobuf::rt::LazyV2<SetColumnSeparators> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetColumnSeparators::new)
    }
}

impl ::protobuf::Clear for SetColumnSeparators {
    fn clear(&mut self) {
        self.separators.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetColumnSeparators {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetColumnSeparators {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SetColumnRegexSeparator {
    // message fields
    pub separator: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetColumnRegexSeparator {
    fn default() -> &'a SetColumnRegexSeparator {
        <SetColumnRegexSeparator as ::protobuf::Message>::default_instance()
    }
}

impl SetColumnRegexSeparator {
    pub fn new() -> SetColumnRegexSeparator {
        ::std::default::Default::default()
    }

    // string separator = 1;


    pub fn get_separator(&self) -> &str {
        &self.separator
    }
    pub fn clear_separator(&mut self) {
        self.separator.clear();
    }

    // Param is passed by value, moved
    pub fn set_separator(&mut self, v: ::std::string::String) {
        self.separator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_separator(&mut self) -> &mut ::std::string::String {
        &mut self.separator
    }

    // Take field
    pub fn take_separator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.separator, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetColumnRegexSeparator {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.separator)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.separator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.separator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.separator.is_empty() {
            os.write_string(1, &self.separator)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetColumnRegexSeparator {
        SetColumnRegexSeparator::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "separator",
                |m: &SetColumnRegexSeparator| { &m.separator },
                |m: &mut SetColumnRegexSeparator| { &mut m.separator },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetColumnRegexSeparator>(
                "SetColumnRegexSeparator",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetColumnRegexSeparator {
        static instance: ::protobuf::rt::LazyV2<SetColumnRegexSeparator> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetColumnRegexSeparator::new)
    }
}

impl ::protobuf::Clear for SetColumnRegexSeparator {
    fn clear(&mut self) {
        self.separator.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetColumnRegexSeparator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetColumnRegexSeparator {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct FromClient {
    // message oneof groups
    pub inner: ::std::option::Option<FromClient_oneof_inner>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FromClient {
    fn default() -> &'a FromClient {
        <FromClient as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum FromClient_oneof_inner {
    initialize(Initialize),
    set_row_index_filters(SetRowIndexFilters),
    set_row_regex_filter(SetRowRegexFilter),
    set_row_filter_combination(SetRowFilterCombination),
    set_row_separators(SetRowSeparators),
    set_row_regex_separator(SetRowRegexSeparator),
    set_column_index_filters(SetColumnIndexFilters),
    set_column_regex_filter(SetColumnRegexFilter),
    set_column_filter_combination(SetColumnFilterCombination),
    set_column_separators(SetColumnSeparators),
    set_column_regex_separator(SetColumnRegexSeparator),
}

impl FromClient {
    pub fn new() -> FromClient {
        ::std::default::Default::default()
    }

    // .Initialize initialize = 1;


    pub fn get_initialize(&self) -> &Initialize {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::initialize(ref v)) => v,
            _ => <Initialize as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_initialize(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_initialize(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::initialize(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_initialize(&mut self, v: Initialize) {
        self.inner = ::std::option::Option::Some(FromClient_oneof_inner::initialize(v))
    }

    // Mutable pointer to the field.
    pub fn mut_initialize(&mut self) -> &mut Initialize {
        if let ::std::option::Option::Some(FromClient_oneof_inner::initialize(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromClient_oneof_inner::initialize(Initialize::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::initialize(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_initialize(&mut self) -> Initialize {
        if self.has_initialize() {
            match self.inner.take() {
                ::std::option::Option::Some(FromClient_oneof_inner::initialize(v)) => v,
                _ => panic!(),
            }
        } else {
            Initialize::new()
        }
    }

    // .SetRowIndexFilters set_row_index_filters = 2;


    pub fn get_set_row_index_filters(&self) -> &SetRowIndexFilters {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_index_filters(ref v)) => v,
            _ => <SetRowIndexFilters as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_set_row_index_filters(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_set_row_index_filters(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_index_filters(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_row_index_filters(&mut self, v: SetRowIndexFilters) {
        self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_index_filters(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_row_index_filters(&mut self) -> &mut SetRowIndexFilters {
        if let ::std::option::Option::Some(FromClient_oneof_inner::set_row_index_filters(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_index_filters(SetRowIndexFilters::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_index_filters(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_row_index_filters(&mut self) -> SetRowIndexFilters {
        if self.has_set_row_index_filters() {
            match self.inner.take() {
                ::std::option::Option::Some(FromClient_oneof_inner::set_row_index_filters(v)) => v,
                _ => panic!(),
            }
        } else {
            SetRowIndexFilters::new()
        }
    }

    // .SetRowRegexFilter set_row_regex_filter = 3;


    pub fn get_set_row_regex_filter(&self) -> &SetRowRegexFilter {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_filter(ref v)) => v,
            _ => <SetRowRegexFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_set_row_regex_filter(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_set_row_regex_filter(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_row_regex_filter(&mut self, v: SetRowRegexFilter) {
        self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_row_regex_filter(&mut self) -> &mut SetRowRegexFilter {
        if let ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_filter(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_filter(SetRowRegexFilter::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_row_regex_filter(&mut self) -> SetRowRegexFilter {
        if self.has_set_row_regex_filter() {
            match self.inner.take() {
                ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            SetRowRegexFilter::new()
        }
    }

    // .SetRowFilterCombination set_row_filter_combination = 4;


    pub fn get_set_row_filter_combination(&self) -> &SetRowFilterCombination {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_filter_combination(ref v)) => v,
            _ => <SetRowFilterCombination as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_set_row_filter_combination(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_set_row_filter_combination(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_filter_combination(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_row_filter_combination(&mut self, v: SetRowFilterCombination) {
        self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_filter_combination(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_row_filter_combination(&mut self) -> &mut SetRowFilterCombination {
        if let ::std::option::Option::Some(FromClient_oneof_inner::set_row_filter_combination(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_filter_combination(SetRowFilterCombination::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_filter_combination(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_row_filter_combination(&mut self) -> SetRowFilterCombination {
        if self.has_set_row_filter_combination() {
            match self.inner.take() {
                ::std::option::Option::Some(FromClient_oneof_inner::set_row_filter_combination(v)) => v,
                _ => panic!(),
            }
        } else {
            SetRowFilterCombination::new()
        }
    }

    // .SetRowSeparators set_row_separators = 5;


    pub fn get_set_row_separators(&self) -> &SetRowSeparators {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_separators(ref v)) => v,
            _ => <SetRowSeparators as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_set_row_separators(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_set_row_separators(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_separators(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_row_separators(&mut self, v: SetRowSeparators) {
        self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_separators(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_row_separators(&mut self) -> &mut SetRowSeparators {
        if let ::std::option::Option::Some(FromClient_oneof_inner::set_row_separators(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_separators(SetRowSeparators::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_separators(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_row_separators(&mut self) -> SetRowSeparators {
        if self.has_set_row_separators() {
            match self.inner.take() {
                ::std::option::Option::Some(FromClient_oneof_inner::set_row_separators(v)) => v,
                _ => panic!(),
            }
        } else {
            SetRowSeparators::new()
        }
    }

    // .SetRowRegexSeparator set_row_regex_separator = 6;


    pub fn get_set_row_regex_separator(&self) -> &SetRowRegexSeparator {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_separator(ref v)) => v,
            _ => <SetRowRegexSeparator as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_set_row_regex_separator(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_set_row_regex_separator(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_separator(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_row_regex_separator(&mut self, v: SetRowRegexSeparator) {
        self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_separator(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_row_regex_separator(&mut self) -> &mut SetRowRegexSeparator {
        if let ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_separator(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_separator(SetRowRegexSeparator::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_separator(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_row_regex_separator(&mut self) -> SetRowRegexSeparator {
        if self.has_set_row_regex_separator() {
            match self.inner.take() {
                ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_separator(v)) => v,
                _ => panic!(),
            }
        } else {
            SetRowRegexSeparator::new()
        }
    }

    // .SetColumnIndexFilters set_column_index_filters = 7;


    pub fn get_set_column_index_filters(&self) -> &SetColumnIndexFilters {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_index_filters(ref v)) => v,
            _ => <SetColumnIndexFilters as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_set_column_index_filters(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_set_column_index_filters(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_index_filters(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_column_index_filters(&mut self, v: SetColumnIndexFilters) {
        self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_index_filters(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_column_index_filters(&mut self) -> &mut SetColumnIndexFilters {
        if let ::std::option::Option::Some(FromClient_oneof_inner::set_column_index_filters(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_index_filters(SetColumnIndexFilters::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_index_filters(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_column_index_filters(&mut self) -> SetColumnIndexFilters {
        if self.has_set_column_index_filters() {
            match self.inner.take() {
                ::std::option::Option::Some(FromClient_oneof_inner::set_column_index_filters(v)) => v,
                _ => panic!(),
            }
        } else {
            SetColumnIndexFilters::new()
        }
    }

    // .SetColumnRegexFilter set_column_regex_filter = 8;


    pub fn get_set_column_regex_filter(&self) -> &SetColumnRegexFilter {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_filter(ref v)) => v,
            _ => <SetColumnRegexFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_set_column_regex_filter(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_set_column_regex_filter(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_column_regex_filter(&mut self, v: SetColumnRegexFilter) {
        self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_column_regex_filter(&mut self) -> &mut SetColumnRegexFilter {
        if let ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_filter(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_filter(SetColumnRegexFilter::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_column_regex_filter(&mut self) -> SetColumnRegexFilter {
        if self.has_set_column_regex_filter() {
            match self.inner.take() {
                ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            SetColumnRegexFilter::new()
        }
    }

    // .SetColumnFilterCombination set_column_filter_combination = 9;


    pub fn get_set_column_filter_combination(&self) -> &SetColumnFilterCombination {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_filter_combination(ref v)) => v,
            _ => <SetColumnFilterCombination as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_set_column_filter_combination(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_set_column_filter_combination(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_filter_combination(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_column_filter_combination(&mut self, v: SetColumnFilterCombination) {
        self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_filter_combination(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_column_filter_combination(&mut self) -> &mut SetColumnFilterCombination {
        if let ::std::option::Option::Some(FromClient_oneof_inner::set_column_filter_combination(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_filter_combination(SetColumnFilterCombination::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_filter_combination(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_column_filter_combination(&mut self) -> SetColumnFilterCombination {
        if self.has_set_column_filter_combination() {
            match self.inner.take() {
                ::std::option::Option::Some(FromClient_oneof_inner::set_column_filter_combination(v)) => v,
                _ => panic!(),
            }
        } else {
            SetColumnFilterCombination::new()
        }
    }

    // .SetColumnSeparators set_column_separators = 10;


    pub fn get_set_column_separators(&self) -> &SetColumnSeparators {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_separators(ref v)) => v,
            _ => <SetColumnSeparators as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_set_column_separators(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_set_column_separators(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_separators(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_column_separators(&mut self, v: SetColumnSeparators) {
        self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_separators(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_column_separators(&mut self) -> &mut SetColumnSeparators {
        if let ::std::option::Option::Some(FromClient_oneof_inner::set_column_separators(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_separators(SetColumnSeparators::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_separators(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_column_separators(&mut self) -> SetColumnSeparators {
        if self.has_set_column_separators() {
            match self.inner.take() {
                ::std::option::Option::Some(FromClient_oneof_inner::set_column_separators(v)) => v,
                _ => panic!(),
            }
        } else {
            SetColumnSeparators::new()
        }
    }

    // .SetColumnRegexSeparator set_column_regex_separator = 11;


    pub fn get_set_column_regex_separator(&self) -> &SetColumnRegexSeparator {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_separator(ref v)) => v,
            _ => <SetColumnRegexSeparator as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_set_column_regex_separator(&mut self) {
        self.inner = ::std::option::Option::None;
    }

    pub fn has_set_column_regex_separator(&self) -> bool {
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_separator(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_column_regex_separator(&mut self, v: SetColumnRegexSeparator) {
        self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_separator(v))
    }

    // Mutable pointer to the field.
    pub fn mut_set_column_regex_separator(&mut self) -> &mut SetColumnRegexSeparator {
        if let ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_separator(_)) = self.inner {
        } else {
            self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_separator(SetColumnRegexSeparator::new()));
        }
        match self.inner {
            ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_separator(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_set_column_regex_separator(&mut self) -> SetColumnRegexSeparator {
        if self.has_set_column_regex_separator() {
            match self.inner.take() {
                ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_separator(v)) => v,
                _ => panic!(),
            }
        } else {
            SetColumnRegexSeparator::new()
        }
    }
}

impl ::protobuf::Message for FromClient {
    fn is_initialized(&self) -> bool {
        if let Some(FromClient_oneof_inner::initialize(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FromClient_oneof_inner::set_row_index_filters(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FromClient_oneof_inner::set_row_regex_filter(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FromClient_oneof_inner::set_row_filter_combination(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FromClient_oneof_inner::set_row_separators(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FromClient_oneof_inner::set_row_regex_separator(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FromClient_oneof_inner::set_column_index_filters(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FromClient_oneof_inner::set_column_regex_filter(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FromClient_oneof_inner::set_column_filter_combination(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FromClient_oneof_inner::set_column_separators(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FromClient_oneof_inner::set_column_regex_separator(ref v)) = self.inner {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromClient_oneof_inner::initialize(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_index_filters(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_filter(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_filter_combination(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_separators(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_row_regex_separator(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_index_filters(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_filter(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_filter_combination(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_separators(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.inner = ::std::option::Option::Some(FromClient_oneof_inner::set_column_regex_separator(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.inner {
            match v {
                &FromClient_oneof_inner::initialize(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FromClient_oneof_inner::set_row_index_filters(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FromClient_oneof_inner::set_row_regex_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FromClient_oneof_inner::set_row_filter_combination(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FromClient_oneof_inner::set_row_separators(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FromClient_oneof_inner::set_row_regex_separator(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FromClient_oneof_inner::set_column_index_filters(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FromClient_oneof_inner::set_column_regex_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FromClient_oneof_inner::set_column_filter_combination(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FromClient_oneof_inner::set_column_separators(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FromClient_oneof_inner::set_column_regex_separator(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.inner {
            match v {
                &FromClient_oneof_inner::initialize(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FromClient_oneof_inner::set_row_index_filters(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FromClient_oneof_inner::set_row_regex_filter(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FromClient_oneof_inner::set_row_filter_combination(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FromClient_oneof_inner::set_row_separators(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FromClient_oneof_inner::set_row_regex_separator(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FromClient_oneof_inner::set_column_index_filters(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FromClient_oneof_inner::set_column_regex_filter(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FromClient_oneof_inner::set_column_filter_combination(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FromClient_oneof_inner::set_column_separators(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FromClient_oneof_inner::set_column_regex_separator(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FromClient {
        FromClient::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Initialize>(
                "initialize",
                FromClient::has_initialize,
                FromClient::get_initialize,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetRowIndexFilters>(
                "set_row_index_filters",
                FromClient::has_set_row_index_filters,
                FromClient::get_set_row_index_filters,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetRowRegexFilter>(
                "set_row_regex_filter",
                FromClient::has_set_row_regex_filter,
                FromClient::get_set_row_regex_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetRowFilterCombination>(
                "set_row_filter_combination",
                FromClient::has_set_row_filter_combination,
                FromClient::get_set_row_filter_combination,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetRowSeparators>(
                "set_row_separators",
                FromClient::has_set_row_separators,
                FromClient::get_set_row_separators,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetRowRegexSeparator>(
                "set_row_regex_separator",
                FromClient::has_set_row_regex_separator,
                FromClient::get_set_row_regex_separator,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetColumnIndexFilters>(
                "set_column_index_filters",
                FromClient::has_set_column_index_filters,
                FromClient::get_set_column_index_filters,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetColumnRegexFilter>(
                "set_column_regex_filter",
                FromClient::has_set_column_regex_filter,
                FromClient::get_set_column_regex_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetColumnFilterCombination>(
                "set_column_filter_combination",
                FromClient::has_set_column_filter_combination,
                FromClient::get_set_column_filter_combination,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetColumnSeparators>(
                "set_column_separators",
                FromClient::has_set_column_separators,
                FromClient::get_set_column_separators,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SetColumnRegexSeparator>(
                "set_column_regex_separator",
                FromClient::has_set_column_regex_separator,
                FromClient::get_set_column_regex_separator,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FromClient>(
                "FromClient",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FromClient {
        static instance: ::protobuf::rt::LazyV2<FromClient> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FromClient::new)
    }
}

impl ::protobuf::Clear for FromClient {
    fn clear(&mut self) {
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.inner = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FromClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FromClient {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11definitions.proto\"3\n\x0fUnexpectedError\x12\x20\n\x0bdescription\
    \x18\x01\x20\x01(\tR\x0bdescription\"n\n\nFromServer\x12\x18\n\x06output\
    \x18\x01\x20\x01(\x0cH\0R\x06output\x12=\n\x10unexpected_error\x18\x02\
    \x20\x01(\x0b2\x10.UnexpectedErrorH\0R\x0funexpectedErrorB\x07\n\x05inne\
    r\"\x05\n\x03And\"\x04\n\x02Or\"G\n\x0bCombination\x12\x18\n\x03and\x18\
    \x01\x20\x01(\x0b2\x04.AndH\0R\x03and\x12\x15\n\x02or\x18\x02\x20\x01(\
    \x0b2\x03.OrH\0R\x02orB\x07\n\x05inner\"\x8c\x04\n\nInitialize\x12*\n\
    \x11row_index_filters\x18\x01\x20\x01(\tR\x0frowIndexFilters\x12(\n\x10r\
    ow_regex_filter\x18\x02\x20\x01(\tR\x0erowRegexFilter\x12B\n\x16row_filt\
    er_combination\x18\x03\x20\x01(\x0b2\x0c.CombinationR\x14rowFilterCombin\
    ation\x12%\n\x0erow_separators\x18\x04\x20\x03(\tR\rrowSeparators\x12.\n\
    \x13row_regex_separator\x18\x05\x20\x01(\tR\x11rowRegexSeparator\x120\n\
    \x14column_index_filters\x18\x06\x20\x01(\tR\x12columnIndexFilters\x12.\
    \n\x13column_regex_filter\x18\x07\x20\x01(\tR\x11columnRegexFilter\x12H\
    \n\x19column_filter_combination\x18\x08\x20\x01(\x0b2\x0c.CombinationR\
    \x17columnFilterCombination\x12+\n\x11column_separators\x18\t\x20\x03(\t\
    R\x10columnSeparators\x124\n\x16column_regex_separator\x18\n\x20\x01(\tR\
    \x14columnRegexSeparator\".\n\x12SetRowIndexFilters\x12\x18\n\x07filters\
    \x18\x01\x20\x01(\tR\x07filters\"+\n\x11SetRowRegexFilter\x12\x16\n\x06f\
    ilter\x18\x01\x20\x01(\tR\x06filter\"I\n\x17SetRowFilterCombination\x12.\
    \n\x0bcombination\x18\x01\x20\x01(\x0b2\x0c.CombinationR\x0bcombination\
    \"2\n\x10SetRowSeparators\x12\x1e\n\nseparators\x18\x01\x20\x03(\tR\nsep\
    arators\"4\n\x14SetRowRegexSeparator\x12\x1c\n\tseparator\x18\x01\x20\
    \x01(\tR\tseparator\"1\n\x15SetColumnIndexFilters\x12\x18\n\x07filters\
    \x18\x01\x20\x01(\tR\x07filters\".\n\x14SetColumnRegexFilter\x12\x16\n\
    \x06filter\x18\x01\x20\x01(\tR\x06filter\"L\n\x1aSetColumnFilterCombinat\
    ion\x12.\n\x0bcombination\x18\x01\x20\x01(\x0b2\x0c.CombinationR\x0bcomb\
    ination\"5\n\x13SetColumnSeparators\x12\x1e\n\nseparators\x18\x01\x20\
    \x03(\tR\nseparators\"7\n\x17SetColumnRegexSeparator\x12\x1c\n\tseparato\
    r\x18\x01\x20\x01(\tR\tseparator\"\xeb\x06\n\nFromClient\x12-\n\ninitial\
    ize\x18\x01\x20\x01(\x0b2\x0b.InitializeH\0R\ninitialize\x12H\n\x15set_r\
    ow_index_filters\x18\x02\x20\x01(\x0b2\x13.SetRowIndexFiltersH\0R\x12set\
    RowIndexFilters\x12E\n\x14set_row_regex_filter\x18\x03\x20\x01(\x0b2\x12\
    .SetRowRegexFilterH\0R\x11setRowRegexFilter\x12W\n\x1aset_row_filter_com\
    bination\x18\x04\x20\x01(\x0b2\x18.SetRowFilterCombinationH\0R\x17setRow\
    FilterCombination\x12A\n\x12set_row_separators\x18\x05\x20\x01(\x0b2\x11\
    .SetRowSeparatorsH\0R\x10setRowSeparators\x12N\n\x17set_row_regex_separa\
    tor\x18\x06\x20\x01(\x0b2\x15.SetRowRegexSeparatorH\0R\x14setRowRegexSep\
    arator\x12Q\n\x18set_column_index_filters\x18\x07\x20\x01(\x0b2\x16.SetC\
    olumnIndexFiltersH\0R\x15setColumnIndexFilters\x12N\n\x17set_column_rege\
    x_filter\x18\x08\x20\x01(\x0b2\x15.SetColumnRegexFilterH\0R\x14setColumn\
    RegexFilter\x12`\n\x1dset_column_filter_combination\x18\t\x20\x01(\x0b2\
    \x1b.SetColumnFilterCombinationH\0R\x1asetColumnFilterCombination\x12J\n\
    \x15set_column_separators\x18\n\x20\x01(\x0b2\x14.SetColumnSeparatorsH\0\
    R\x13setColumnSeparators\x12W\n\x1aset_column_regex_separator\x18\x0b\
    \x20\x01(\x0b2\x18.SetColumnRegexSeparatorH\0R\x17setColumnRegexSeparato\
    rB\x07\n\x05innerb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
